/* In this file, we go through the ways to create a module, or an extension to the source file.*/


/* Let's see the simplest way of modules, which is including a file.
Include is a preprocessor directive, which means that it is executed before the compilation of the code.
Include copies the content of the file to the place where it is called.

To make it easier, let's create a file called "module.puppy" and write the following code in it:

print "Hello, I am a module!"
moduleVar = 5
func moduleFunc:
    print "Now entering the function!"

*/
#include module.puppy
// This is how we include a file.
print moduleVar
moduleFunc



/* The second way of creating a module is using the compiled PUPS file.
This requires you to compile the file first, and then "import" it by using "import" keyword.
Let's assume you have already compiled "module.puppy" into "module.pups".
*/
// This is how we import a compiled PUPS file. The path is relative to where the program is executed.
import "module.pups" as module  // "as" keyword is almost always used when importing a module(not linked), since you need to give it a name.
// Also, the file must be a string, so you need to put it in quotes, unlike the "include" keyword.
print module.moduleVar // To access modules, we use the dot operator.
module.moduleFunc



/* The third way of creating a module is by writting dynamic libraries.
This is the most complicated way, but it is also the most powerful way.
To make it, you may see the introduction to dynamic libraries under learn/The Library/How to write an extension.md

But, to import it, you just need to use the "import_lib" keyword.
For example, let's assume you have already compiled "libmodule.dll" under directory "myModule".
You may write like this:
*/
import_lib "myModule" "module"
// The first string is the path to the library, and the second string is the name of the module.
// The module name extension depends on the platform. For example, on Windows, it is ".dll", on Linux, it is ".so", and on Mac, it is ".dylib".
// But you don't need to write the extension, since the compiler will automatically add it.
